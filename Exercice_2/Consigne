La commande MPI_Wtime() renvoie un nombre de type double contenant le temps en
secondes qui s'est √©coul√© depuis un instant xe (mais, sans autre information, arbitraire).
Utilisez cette commande pour mesurer le nombre de secondes qui s'est √©coul√© entre la n de
MPI_Init et MPI_Finalize pour chacun des processus. Achez cette dur√©e juste avant l'appel
de MPI_Finalize.
Compilez et lancez votre programme avec 4 processus.
An d'envoyer ou de recevoir des messages d'un processus √† l'autre, on utilisera les commandes MPI_Send et MPI_Recv :
MPI_Send(buffer,k,MPI_Type,destination_id,balise,MPI_COMM_WORLD);
Ici, buffer est un pointeur sur les donn√©es √† envoyer, k est le nombre de donn√©es envoy√©es,
MPI_Type est le type des donn√©es envoy√©es (pour des nombres entiers, MPI_INT, pour des
nombres de type double, MPI_DOUBLE, ...). En outre, l'entier destination_id est l'identi-
cateur du processus auquel les donn√©es doivent √™tre envoy√©es et l'entier balise permet de
di√©rentier di√©rents types de messages.
MPI_Recv(buffer,k,MPI_Type,origine_id,balise,MPI_COMM_WORLD,&status);
Ici, les trois premiers arguments et le quatri√®me sont de m√™me type que pour la commande pr√©c√©dente. L'entier origine_id est l'identicateur du processus duquel les donn√©es sont re√ßues.
L'argument status de type MPI_Status permet au syst√®me de donner des d√©tails suppl√©mentaires sur le message re√ßu.